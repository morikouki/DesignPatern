Commandパターン

【命令をクラスにする】

クラスが仕事を行うときには、自分のクラスや他のクラスのメソッドを呼ぶ
メソッドを呼び出した結果はオブジェクトの状態に反映されるでしょうが、仕事の履歴はどこにも残らない。
こんなとき、「この仕事を行いなさい」という「命令」を表現するクラスがあれば便利。
行いたい仕事を「メソッドを呼び出す」という動的な処理として表現するのではなく、
命令を表すクラスのインスタンスという1個の「もの」として表現することができる。
履歴を管理したいときには、そのインスタンスの集まりを管理すれば良いことになり、命令の集まりを保存しておけば、
同じ命令を再実行することもできることになる。あるいはまた、複数の命令をまとめたものを新しい命令として再利用することもできる。
このような「命令」に
Commandパターン　という名前をデザインパターンではつけている。
commandは「命令」という意味だが、Eventと呼ばれる場合もある。
「イベント駆動プログラミング」で使われる「イベント」と同じ意味で、マウスをクリックした、キーを押した、
といったイベントが起きたときに、その出来事を一旦インスタンスという「もの」にしておき、
発生順に待ち行列に並ばせる。そして、並んでいるイベントを、順番に処理していく。

サンプルプログラムでは、
簡単なお絵かきソフトを作成している。
マウスをドラッグすると、赤い点の列が描画され、「clear」ボタンを押すと、点が全て消える。
ユーザがマウスをドラッグするたびに、「この位置に点を描け」という命令が、DrawCommandクラウのインスタンスとして生成される。
このインスタンスを保存しておけば、必要に応じて点を再描画することができる。

Commandパターンの登場人物
・Command（命令）の役
命令のインタフェースを定義する役
サンプルプログラムでは、Commandインタフェースがこの役を務める。

・ConcreateCommand（具体的命令）の役
Command役のインタフェースを実際に実装している役
サンプルプログラムでは、MacroCommandクラスとDrawCommandクラスがこの役を務める。

・Receiver（受信者）の役
Command役が命令を実行するときに対象となる役、命令の受取手と呼んでも良い。
サンプルプログラムでは、DrawCommadの命令を受け取っているのは、DrawCanvasクラス。

・Client（依頼者）の役
ConcreateCommand役を生成し、その際にReceiver役を割り当てる役
サンプルプログラムでは、Mainクラスがこの役を務める。
Mainクラスは、マウスのドラッグに合わせてDrawCommandのインスタンスを生成するが、その際に
Receiver役としてDrawCanvasのインスタンスをコンストラクタに渡している。

・Invoker（起動者）の役
命令の実行を開始する役
Command役で定義されているインタフェースを呼び出す役
サンプルプログラムでは、MainクラスとDrawCanvasクラスがこの役を務める。
この2つのクラスがCommandインタフェースのexecuteメソッドを呼び出している。
Mainクラスは、Client役とInvoker役の2役を務めていることになる。

命令が持つべき情報は？
「命令」にどれだけの情報を持たせるべきかは、目的によって異なる。
DrawCommandクラスには、描画する点の位置という情報だけを持たせている。
点の大きさや色、形などの情報は持たせていない。
DrawCommandが「そのイベントが発生した時刻（タイムスタンプ）」という情報を持っていたとする。
そうすると、際描画するときには、単なる描画ではなく、ユーザのマウス動作の緩急も再現できるかもしれない。
ところで、DrawCommandクラスは、描画対象を表すフィールドも持っている。
サンプルプログラムでは、DrawCanvasのインスタンスは1つだけであり、全ての描画はそこに対して行われるので、
このdrawableフィールドはあまり意味がない。しかし、描画対象（すなわちReceiver役）が複数存在するような
プログラムの場合には、このようなフィールドが役に立つ。CocreateCommand役自信がReceiver役を「知っている」ことにより、
ConcreateCommand役を誰が管理しても、誰が持っていても、いつでもexecuteすることができるから。

履歴の保存
サンプルプログラムでは、描画の履歴をMacroCommandのインスタンスとして表現している。
このインスタンスは、これまでの描画の情報を全て持っているわけで、このインスタンスをファイルとしてうまく保存すれば、
描画履歴が保存されることになる。

アダプター
サンプルプログラムのMainクラスは、3つのインタフェースを実装している。
しかし、インタフェースのメソッドのうち、実際に使っているのはその一部。
例えば、MouseMotionListenerの
　public void mouseMoved(MouseEvent e)
　public void mouseDragged(MouseEvent e)
というメソッドのうち、使っているのはmouseDraggedメソッドだけで、また例えば、
WidowListenerでは、
	public void windowActivated(WindowEvent e)
	public void windowClosed(WindowEvent e)
	public void windowDeactivated(WindowEvent e)
	public void windowDeiconified(WindowEvent e)
	public void windowIconified(WindowEvent e)
	public void windowOpened(WindowEvent e)
という7つのメソッドのうち、widowClosingメソッドだけを使っている。
プログラミングを簡略化するために、アダプターと呼ばれるクラス群がjava.awt.eventパッケージに用意されている。
例えば、MouseMotionListenerインタフェースに対してはMouseMotionAdapterクラス、WindowListenerインタフェースに対しては
WindowAdapterクラスが用意されている。
