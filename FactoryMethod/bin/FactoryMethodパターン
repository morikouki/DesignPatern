FactoryMethodパターン
TemplateMethodパターンでは、スーパークラス側で処理の骨組みを作りサブクラス側で具体的な処理の肉付けを行った。
このパターンをインスタンス生成の場面に適用したものが、
FactoryMethodパターンになる。

factoryとは日本語で「工場」という意味で、インスタンスを生成する工場をTemplateMethodパターンで構成したものが、
FactoryMethodパターンになる。

FactoryMethodパターンでは、インスタンスの作り方をスーパークラスの側で定めるが、具体的なクラス名までは定めない。
具体的な肉付けは、全てサブクラスの側で行う。これによって、インスタンス生成のための枠組み（フレームワーク）と、
実際のインスタンス生成のクラスとを分けて考えることができるようになる。

サンプルプログラムでは、
身分証明書カード（IDカード）を作る工場を題材としたもので5つのクラスが登場する
ProductクラスとFactoryクラスは、frameworkパッケージに属しており、この2つのクラスがインスタンス生成のための枠組み（フレームワーク）の役割を果たす
IDCardクラスとIDCardFactoryクラスは、実際の肉付けを行っている。
Mainクラスは動作テストのクラス

FactoryMethodパターンの登場人物
・Product（製品）の役
これはフレームワーク側で、このパターンで生成されるインスタンスが持つべきインタフェース（API）を定める抽象クラス。
具体的な内容は、サブクラスのConcreateProduct役が定める。
サンプルプログラムでは、Productクラスがこの役を務める

・Creator（作成者）の役
これはフレームワーク側で、Product役を生成する抽象クラス
具体的な内容はサブクラスのConcreateCreator役を定める
サンプルプログラムでは、Factoryクラスがこの役を務める
Creator役は、実際に生成するCreateProduct役については何も知らない。
Creator役が知っているのは、Product役とインスタンス生成のメソッドを呼び出せば、Productが生成されるということだけ
サンプルプログラムでは、createProductメソッドがインスタンス生成のためのメソッドになっている。
newによる実際のインスタンス生成を、インスタンス生成のためのメソッドを呼び出しに代えることで、具体的なクラス名による束縛から
スーパークラスを解放していることになる。

・ConcreateProduct（具体的製品）の役
これは具体的な肉付けをする側で、具体的な製品を定める。
サンプルプログラムでは、IDCardクラスがこの役を務める

・ConcreateCreator（具体的作成者）の役
これは具体的な肉付けをする側で、具体的な製品を作るクラスを定める。
サンプルプログラムでは、IDFactoryクラスがこの役を務める


フレームワークと肉付け
これまで、「フレームワーク」と「肉付け」の2つの側について話したが、
これらはそれぞれ、frameworkパッケージとidcardパケージに分かれる。
ここで同じフレームワークを使用して全く別の「製品」と「工場」を作るとする。
テレビを作るテレビの工場とテレビクラスを作成するとすると、
新たにテレビパッケージを作成してクラスを作成することが考えられるが、
frameworkパッケージの中身を修正せずに、全く別の「テレビ」が作れるのだ。
サンプルプログラムでは、frameworkパッケージでは、idcardパッケージをimportしていないので
新しいテレビパッケージを作成しても既存のframeworkパッケージは全く修正しなくていい。
このことを「frameworkパッケージはidcardパッケージに依存していない」と表現できる。


一般にデザインパータンを使用してあるクラス群を設計する場合、
そのクラス群の捕手を行う人に、設計書の意図したデザインパターンが何であるかうまく伝わるようにする必要がある。
さもないと、設計書の最初の糸から離れた修正が加えられてしまう可能性がある。
