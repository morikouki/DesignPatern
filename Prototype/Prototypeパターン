Prototypeパターン

【コピーしてインスタンスを作る】

クラスからインスタンスを生成するのではなく、
インスタンスから別のインスタンスを生成するのがPrototypeパターン。
日本語でprototypeは「原型」や「模範」という意味で、原型となるインスタンス、模範となるインスタンスをもとに新しいインスタンスを作成する。
Javaでは複製を作る操作を「clone」と呼んでいる。

自分達はインスタンスを作成するとき
new クラス名　とします。
new というJava言語のキーワードを使用して、クラス名を指定することでインスタンスを生成します。
このようにnewでインスタンスを生成する場合は必ずクラス名を指定しないといけない。
しかし、クラス名を指定せずにインスタンスを生成したくなる場合もあります。
クラスからインスタンスを生成するのではなく、インスタンスをコピー（複製）して
新しいインスタンスを作るのです。それは以下のような時になる。

1. 種類が多すぎてクラスにまとめられない場合
→扱うオブジェクトの種類があまりにも多すぎて、1つ1つを別のクラスにしていたら、ソースファイルを
多数作成する必要が生じてしまう場合。

2. クラスからのインスタンス生成が難しい場合
→生成させたいインスタンスが複雑な過程を得て作られるものであり、クラスから作り上げることが難しい場合。
例えば、グラフィックエディタなどでユーザーがマウスの操作によって作り上げた図形を表すインスタンスがあるとする。
そのような、ユーザーの操作で生成されるインスタンスを、プログラミングによって作るのは困難になる。
ユーザの操作で作られたインスタンスと同じものを再び作りたい場合には、今作ったインスタンスを一旦保存しておき、作りたい時にそれをコピーする。

3. フレームワークと生成するインスタンスを分けたい場合
→インスタンスを生成するときのフレームワークを、特定のクラスに依存しないように作りたい場合。
このような場合には、クラス名を指定してインスタンスを作るのではなく、前もって「雛形」となるインスタンスを登録しておき、
その登録したインスタンスをコピーすることでインスタンスを生成する。

インスタンスから別のインスタンスを作り出すというのは、コピー機を使って書類をコピーすることに似ている。
元の書類をどうやって作ったかを知らなくても、コピー機にかければ同じ書類を何枚でも作れるのだ。

サンプルプログラムでは、
Produceインタフェースや、Managerクラスには
MessageBoxクラスや、UnderlinePenクラス名が全く出てこないことに注意してほしい。
クラス名が出てこないということは、ProduceとManagerはそれらのクラスとは独立に修正ができるということを意味している。
ソース中にクラスの名前を書くと、そのクラスと密接な関係ができてしまう。
Managerクラスでは、具体的な個々のクラスの名前を書かず、ただProduceインタフェース名だけを使用している。
このインタフェースだけが、Managerクラスと他のクラスを結ぶ架け橋となっている。

Prototypeパターンの登場人物
・Prototype（原型）の役
Prototype役は、インスタンスをコピー（複製）して新しいインスタンスを作るためのメソッドを定める。
サンプルプログラムでは、Productインタフェースがこの役を務める

・ConcreatePrototype（具体的な原型）の役
ConcreatePrototype役は、インスタンスをコピーして新しいインスタンスを作るメソッドを実際に実装する。
サンプルプログラムでは、MessageBoxクラスやUnderlinePenクラスがこの役を務める

・Client（利用者）の役
Client役は、インスタンスをコピーするメソッドを利用して、新しいインスタンスを作る。
サンプルプログラムでは、Managerクラスがこの役を務める。


クラスからインスタンスを作っていけないのか
new クラス名
でインスタンスを作成すればいいじゃないと思う。
なんでいけないのか。
最初に記載した3つのパターンを振り返りつつ記載する
1. 種類が多すぎてクラスにまとめられない場合
サンプルプログラムでは、3つの雛形が登場した。
・'~'を使って文字列に下線を引くもの
・'*'を使って文字列に枠をつけるもの
・'/'を使って文字列に枠をつけるもの
この例はシンプルで、3つしかないがその気になればいくらでも多くの種類を作成できる。
しかし、それらをすべて別々のクラスにしてしまってはクラスの数が多くなりすぎる。


2. クラスからのインスタンス生成が難しい場合
これはサンプルプログラムではあまり実感できないが、マウスを使って操作を行う、図形エディタのようなアプリケーションを想像すると理解しやすい。
ユーザーが操作をおこなって作った図形を表すインスタンスと同じものを作りたいとします。その時は、
クラスを使うのではなく、インスタンスをコピーして作る方が簡単

3. フレームワークと生成するインスタンスを分けたい場合
サンプルプログラムでは、インスタンスのコピー（clone）を行う部分をframeworkパッケージの中に閉じ込めている。
Managerクラスのcreateメソッドには、クラス名の代わりに"strong message"や"slash box"という文字列をインスタンス生成のための名前として与えている。
これらは、Javaという言語が備えているインスタンス生成の機構であるnew クラス名()という形式をより汎用にし、
クラス名の束縛からフレームワークを分離しているといえる。


ソースプログラムの中にクラス名が書かれていると、何が問題なのか。
オブジェクト指向プログラミングの目標の1つが「部品としての再利用」であることを思い出してください。
ソースの中に利用するクラスの名前を書いておくことが、常に悪いわけではないが、ソースの中に利用するクラスの名前が書かれていると、
そのクラスと切り離して再利用することはできなくなってしまう。