Abstract Factoryパターン
abstractは「抽象的な」という意味で、factoryは「工場」という意味。
すなわちabstract factoryは「抽象的な工場」という意味になる。
普通に考えると、「抽象的」と「工場」はあまり結びつかない、
工場といったら部品を組み合わせて製品を作り出す場所だから。
しかし、このパターンは、「抽象的な工場」だけじゃなく、「抽象的な部品」や「抽象的な製品」も登場するから余計に分かりにくい。
抽象的な工場では、抽象的な部品を組み合わせて抽象的な製品を作る。
「抽象的」という言葉はオブジェクト指向では、「具体的にどのように実装されているかについては考えず、インタフェースだけに注目している」状態のこと。
例えば、抽象メソッド（abstract method）というのは、メソッドの本体は書かれておらず、名前とシグニチャ（引数の型と数）だけが定まっているメソッドのこと

Abstract Factoryパターンでは、抽象的な工場が登場し、抽象的な部品を組み合わせて抽象的な製品を作る。
つまり、部品の具体的な実装には注目せず、インタフェースに注目する。そして、そのインタフェースだけを使って、部品を組み立て製品にまとめる。

サンプルプログラムは
「階層構造を持ったリンク集をHTMLファイルとして作る」というもの
以下の3ツノパッケージに分かれている
・factoryパッケージ　　抽象的な工場・部品・製品を含むパッケージ
・無名パッケージ　　　　Mainクラスを含むパッケージ
・listfactory　　　　具体的な工場・部品・製品を含むパッケージ（ulタグを使用して実装している）
・tablefactory　　　 具体的な工場・部品・製品を含むパッケージ（tableタグを使用して実装している）

コンパイルは下記のコマンドで行う
javac Main.java listfactory/ListFactory.java

Abstract Factoryパターンの登場人物

・AbstractProduct（抽象的な製品）の役
AbstractProduct役は、AbstractFactory役によって作り出される抽象的な部品や製品のインタフェースを定める
サンプルプログラムでは、Linkクラス、Trayクラス、Pageクラスがこの役を務める

・AbstractFactory（抽象的な工場）の役
AbstractFactory役は、AbstractFactory役のインスタンスを作り出すためのインタフェースを定める
サンプルプログラムでは、Factoryクラスがこの役を務める

・Client（依頼者）の役
Client役は、AbstractFactory役とAbstractProduct役のインタフェースだけを使って仕事を行う役
Client役は、具体的な部品や製品や工場については知らない。
サンプルプログラムでは、Mainクラスがこの役を務める

・ConcreateProduct（具体的な製品）の役
ConcreateProduct役は、AbstractProduct役のインタフェースを実装する
サンプルプログラムでは、パッケージごとに以下のクラスがこの役を務める
　listfactoryパッケージ：ListLinkクラス、ListTrayクラス、ListPageクラス
　tablefactoryパッケージ：TableLinkクラス、TableTrayクラス、TablePageクラス

・ConcreateFactory（具体的な工場）の役
ConcreateFactory役は、AbstractFactory役のインタフェースを実装する
サンプルプログラムでは、パッケージごとに以下のクラスがこの役を務める
　listfactoryパッケージ：ListFactoryクラス
　tablefactoryパッケージ：TableFactoryクラス


具体的な工場を新たに追加するのは簡単
Abstract Factoryパターンに、具体的な工場を新たに追加するのは簡単。
「簡単」というのはどのようなクラスを作り、どのようなメソッドを実装すればいいかがはっきりしているという意味。
例えば、サンプルプログラムに新たに具体的な工場を追加するとする。
やるべきことは、Factory, Link, Tray, Pageのサブクラスを作り、それぞれの抽象メソッドを実装すること。
つまり、factoryパッケージのクラスが持っている抽象的な部分を具体化していくこと。
このとき、いくら具体的な工場を追加しても（また、具体的な工場のバグを修正しても）、抽象的な工場やMainの部分を修正する必要なまったない

部品を新たに追加するのは困難
Abstract Factoryパターンに新たな部品を追加することを考える
例えば、factoryパッケージに画像を表すPictureという部品を追加したとする。
そうすると、すでに存在する具体的な工場全てに、Pictureに対応した修正が加わることになる。
例えば、listfactoryパッケージならば、
・ListFactoryクラスにcreatePictureメソッドを追加
・新たにListPictureクラスを作成
という修正が必要になる。すでに作られて具体的な工場が多ければ多いほど大変になる。