Visitorパターン

【構造を渡り歩きながら仕事をする】

visitorというのは「訪問者」という意味。

データ構造の中にたくさんの要素が格納されており、その各要素に対して何かの「処理」をしていくとする。
このとき、その「処理」のコードはどこに書くべきでしょうか。
普通に考えれば、データ構造を表しているクラスのなかに書く。でももし、その「処理」が一種類とは限らなかったらどうするのか、
その場合、新しい処理が必要になるたびに、データ構造のクラスを修正しなければならなくなる。
Visitorパターンでは、データ構造と処理を分離する。そして、データ構造の中を巡り歩く主体である「訪問者」を表すクラスを用意し、そのクラスに処理を任せる
すると、新しい処理を追加したい時に新しい「訪問者」を作れば良いことになる。
そして、データ構造の方は、戸を叩いてくる「訪問者」を受け入れてあげれば良い。

サンプルプログラムでは
訪問者が渡り歩くデータ構造として、Compositeパターンで登場したファイルとディレクトリの例をもう一度使うことにしている。
ファイルとディレクトリで構成されたデータ構造の中を訪問者が渡り歩き、ファイルの一覧を表示するプログラムを作成する。

Visitorパターンの登場人物
・Visitor（訪問者）の役
Visitor役は、データ構造の具体的な要素（ConcreateElement役）ごとに「XXXを訪問した」というvisit(XXX)メソッドを宣言する
visit(XXX)はXXXを処理するためのメソッドで、実際のコードはConcreateVisitor役の側に書かれる。
サンプルプログラムでは、Visitorクラスがこの役を務める

・ConcreateVisitor（具体的訪問者）の役
ConcreateVisitor役は、Visitor役のインタフェースを実装する。
visit(XXX)という形のメソッドを実装し、個々のConcreateElement役ごとの処理を記述する
サンプルプログラムでは、ListVisitorクラスがこの役を務める。
ListVisitorでcurrentdirフィールドの値が変化したように、visit(XXX)を処理していく中で、ConcreateVisitor役の内部状態が変化することもある。

・Element（要素）の役
Element役は、Visitory役の訪問先を表す役
訪問者を受け入れるaccptメソッドを宣言する
accptメソッドの引数にはVisitor役が渡される
サンプルプログラムでは、Elementインタフェースがこの役を務める。

・ConcreateElement（具体的要素）の役
ConcreateElement役は、Element役のインタフェースを実装する役
サンプルプログラムでは、Fileクラスや、Directoryクラスがこの役を務める

・ObjectStructure（オブジェクトの構造）の役
ObjectStructure役は、Element役の集合を扱う役
ConcreateVisitor役が個々のElement役を扱えるようなメソッドを備えている。
サンプルプログラムでは、Directoryクラスがこの役を務める（一人二役）
ConcreateVisitor役が個々のElement役を扱えるように、サンプルプログラムのDirectoryクラスには
iteratorメソッドが用意されている。

ダブルディスパッチ
accept（受け入れ）メソッドは以下のような呼出になっている。
 element.accept(visitor)
 一方、visit（訪問者）メソッドは次のような呼出
  visitor.visit(element)
 この2つを見比べると、ちょうど反対の関係にある。
 Visitorパターンでは、ConcreateElement役とConcreateVisitor役の組によって実際の処理が決定する。
 これを一般的に、
 ダブルディスパッチ
 という。

 Visitorパターンの目的は、処理をデータ構造から分離すること。
 データ構造は、要素を集合としてまとめたり、要素感を繋いだりしてくれる大事なもの。
 しかしその構造を保持しておくことと、その構造を基礎とした処理を書くことは別のもの。

 ConcreateVisitor役の追加は簡単
 新しいConcreateVisitor役を追加するのが簡単で、
 具体的な処理はConcreateVisitor役に任せてしますことができ、
 その処理のためにConcreateElement役を修正する必要は全くないから。

 ConcreateElement役の追加は困難
 例えば、サンプルプログラムで、EntryクラスのサブクラスとしてDeviceクラスを追加したいとします
 つまりDeviceクラスは、FileやDirectoryクラスの兄弟にあたる
 その時、Visitoryクラスにはvisit(Divice)メソッドを作る必要が生じる。
 そして、visitorクラスのサブクラス全部に新たにvisit(Device)メソッドを実装しないといけなくなる。

 Visitoryが処理するためには何が必要か
 Visitorパターンでは、データ構造の要素に対する処理を切り出してVisitor役に任せる。
 このようにしてデータ構造とその要素に対する処理が分離できる。。
 というのは結構な話だが、Element役はVisitor役に対して十分な情報を公開する必要がある。
 訪問者はデータ構造から必要な情報を取得して働く。
 必要な情報が得られないと訪問者はうまく働くことができない。
 その反面、公開すべきではない情報までを公開してしまうと、将来データ構造を改良するのが難しくなる。