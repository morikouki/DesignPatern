Flyweightパターン

【同じものを共有して無駄をなくす】

flyweightとは「フライ級」のことで、ボクシングで最も体重が軽い階級を表す。
このデザインパターンは、オブジェクトを「軽く」するためのもの。
オブジェクトはコンピュータの中に仮想的に存在するもので、「重い」とか「軽い」とか言ってもの
実際の重さのことを言っているのではなく。「メモリの使用量」のことを言っている。
たくさんのメモリを使うオブジェクトを「重い」として、
少ししかメモリを使わないオブジェクトを「軽い」としている。
javaではnewでインスタンスを作ることができ、そのインスタンスを保持するために、メモリが確保される。
たくさんnewしてしまうと、メモリの使用量が大きくなる。
Flyweightパターンで使っている技法は、一言で言えば、
「インスタンスをできるだけ共有させて、無駄にnewしない」
というもの。インスタンスが必要なときにnewするのではなく、すでに作っているインスタンスを利用できるなら
それを共有して使う。・・というもの

サンプルプログラムでは、
重いインスタンスを作るクラスとして「大きな文字」を表現するクラスを考える。
文字を集めて「大きな文字」を作っている。

Flyweightパターンの登場人物
・Flyweight（フライ級）の役
普通に扱うとプログラムが重くなるので共有したほうが良いものを表す役
サンプルプログラムでは、BigCharクラスがこの役を務める。

・FlyweightFactory（フライ級の工場）の役
Flyweight役を作る工場の役
この工場を使ってFlyweight役を作ると、インスタンスが共有される。
サンプルプログラムでは、BigCharFactoryクラスがこの役を務める。

・Client（依頼者）の役
FlyweightFactory役を使ってFlyweight役を作りだし、それを利用する役
サンプルプログラムでは、BigStringクラスがこの役を務める。

複数箇所に影響が及ぶ
Flyweightパターンではインスタンスを「共有」することがテーマ。
インスタンスを共有するときに注意しないといけないのはどんなことか、
まず、「共有しているものを変更すると、複数箇所に影響が及ぶ」ということ。
つまり、1津のインスタンスを変更するだけで、そのインスタンスを使っている複数箇所に同時に変更が反映される。
常に悪いとい訳ではない、プログラムが扱う問題によって良い場合もあれば良くない場合もある。
共有は、「1つを変更しただけで、それを使っている箇所全部に影響を及ぼす」という特性を持っていることになる。
なので、Flyweight役に持たせる情報は、よくよく選らず必要がある。
本当に複数箇所に共有させるべき情報だけを、持たせるのが良い。

intrinsicとextrinsic
共有させる情報は、intricsicな情報と呼ばれている。
intricsicとは「本来備わっている」「本質的な」という意味で、言い換えれば、そのインスタンスをどこに持って行っても、
どんな状況下でも変わることのない情報、状態に依存しない情報という意味になる。
一方、共有させない情報は、extrinsicな情報と呼ばれている。
extrinsicとは「外からやってきた」「非本質的な」という意味で、インスタンスをおく場所によって変化する情報、状況によって
変化する情報、状態に依存する情報という意味。

Flyweightパターンで管理されているインスタンス（Map化したインスタンス）は
コンピュータ上でずっと持っていることになる。
ずっと使われていなくても、一度作成されて保存しているインスタンスはメモリを圧迫している。
通常Javaのプログラムでは、メモリが不足したときに、ガベージコレクションという処理を行い
自分のメモリ空間を調査して使われていないインスタンスを解放して、メモリの空き領域を増やしてくれる。
Flyweightパターンで管理しているインスタンスがずっと保持されていて、ガベージコレクションの対象外なので、
長期間動作するプログラムなどでは注意が必要。