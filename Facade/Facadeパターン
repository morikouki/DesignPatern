Facadeパターン

【シンプルな窓口】

プログラムというのはだんだん大きくなっていく傾向がある。
たくさんのクラスが作られ、相互に関係し合い、複雑になっていく。
クラスを使う場合には、クラスの間の関係を正しく理解して、正しい順番でメソッドを呼び出す必要がある。
大きなプログラムを使って処理を行うためには、関係しあっているたくさんのクラスを適切に制御しなければならない。
だとすると、その処理を行うための「窓口」を用意しておくのがいい。
そうすれば、沢山のクラスを個別に制御しなくても、その「窓口」に対して要求を出すだけで仕事が済む。
そのような「窓口」が、
　Facadeパターン（ファサード）　だ。

facadeはフランス語を語源とする単語で「建物の正面」という意味で、
Facadeパターンは、複雑に絡み合ってごちゃごちゃした詳細をまとめ、こうレベルのインタフェースを提供する。
Facade役は、システムの外側に対してはシンプルなインタフェースを見せる。
また、Facade役はシステムの内側にある各クラスの役割や依存関係を考えて、正しい順番でクラスを利用する。

サンプルプログラムでは、
ここで作成したプログラムは、ユーザーのWebページを作成するもの
Facadeパターンのサンプルを作るためには、本来、「複雑に入り組んだ沢山のクラス」が必要になる。
しかし、ここではサンプルプログラムを短くするために、3つのクラスだけからなる簡単なシステムを考える。
このシステムは、メールアドレスから名前を得るデータベース（Database）、HTMLファイルを作成するクラス（HtmlWriter）、
それからFacade役として高レベルのインタフェースを提供するクラス（PageMaker）で構成されている。

Facadeパターンの登場人物
・Facade（正面）の役
Facade役は、システムを構成しているその他大勢の役の「シンプルな窓口」となる。
Facade役は、高レベルでシンプルなインタフェースをシステム外部に提供する。
サンプルプログラムでは、PageMakerクラスがこの役を務める

・システムを構成しているその他大勢の役
その他大勢の役は、それぞれの仕事を行うが、Facade役のことは意識しない。
Facade役から呼び出されて仕事を行うが、その他大勢の役の方からFacade役を呼び出すことはない。
サンプルプログラムでは、DatabaseクラスとHtmlWriterクラスがこの役を務める。

・Client（依頼人）の役
Facadeパターンを利用する役で、
サンプルプログラムでは、Mainクラスがこの役を務める。

Facadeがやっていることはなんだ
Facade役は、複雑なものを単純に見せている。
その「複雑なもの」って何か。
裏方で働いている沢山のクラスの関係や使い方が複雑なので、Facade役は、その複雑さを意識しないで済むように気を遣っている。
ここでのポイントはインタフェースを少なくすること。
クラスやメソッドがたくさん見えていると、プログラマはどれを使っていいか迷うし、また、呼び出しの順番にも注意しないといけなくなる。
注意しないといけないということは、間違えやすいということ。
なので、インタフェースが少ないFacede役を考えるのがいい。
インタフェースの数が少ないというのは、外部との結合が疎である（疎結合）とも表現できる。
疎結合の場合、パッケージを部品として再利用しやすくなる。

再帰的なFacadeパターンの適用
Facade役を持ったクラスの集合が複数個あったとする。
その時、それらの集合をまとめた新たなFacade役を導入することもできる。
つまり、Facadeパターンを再帰的に適用するのだ。
非常に大きなシステムが、多数のクラス・多数のパッケージを抱える時、要所要所に
Facadeパターンを適用すると、システムはより便利になるのだ。

プログラマがFacadeを作らない理由
複雑なプログラムの内部を熟知しているプログラマは、もしかするとFacade役を作りたがらない、無意識のうちに作るのを避けて里うことがある。
それは、その熟練プログラマの頭の中には、システムの内容が全て入っていて、沢山のクラスの相互関係が手に取るようにわかっているからかもしれないし、
自分の技術を誇り、他のプログラマに「知ったかぶり」をすることができるからかもしれない。
あるプログラマが「ああ、このクラスを呼ぶ前にこっちを呼ぶんだよ。こっちのメソッドの呼び出し前には、このクラスに登録しておく必要があるんだぜ」
といった話を「得意げに」語るときは、Facade役を導入する必要があることを示唆している。
はっきりと言葉で表現できるノウハウは、プログラマの頭の中に隠しておくべきものではなく、コードとして表現しておくべきもの。


