Singletonパターン
インスタンスがたった一つしか存在しないことを保証するパターン。

普通プログラムを動かすときは、たくさんのインスタンスを生成する。
例えば、文字を扱うStringは文字列が1000個登場すれば、
1000個のインスタンスを作成していることになる。
しかし、「このクラスのインスタンスは一個しか作らないし、一個しか作りたくない」というときがある。
それは、システムの中に一つしか存在しないものを表現したいとき。
new を一回だけにすれば良いと思うかもしれないが、
・指定したクラスのインスタンスが絶対に一個しかないことを証明したい。
・インスタンスが一個しか存在しないことをプログラム上で表現したい。
そんな時に役立つのがSingletonパターン


サンプルプログラムでは
Singletonクラスを用意している、このクラスがインスタンスを一つしか作らないものになる。
コンストラクタをprivateにして外部からnewできないようにし、
private staticでSingletonクラスの変数を定義し、初期化の時にnewでインスタンスを生成している。
こうすることで、Singletonクラスのロード時だけインスタンスが作成されるようになる。
あとは、インスタンスを取得するメソッドを用意してあげれば良い。

Singletonパターンの登場人物
・Singletonの役
Singletonパターンには、この役しか登場しない。
Singleton役は唯一のインスタンスを得るためのstaticメソッドを持っている。
このメソッドはいつも同じインスタンスを返す

なぜ制限を設ける必要があるのか
なぜ、わざわざ制限を課すようなプログラミングを行う必要があるのか？
制限を課すとは、前提になる条件を増やすということになる。
インスタンスが複数存在すると、インスタンスたちが相互に影響しあって、思いがけないバグを生み出してしまう可能性がある。
しかし、インスタンスが一つしかないことを保証していれば、その前提条件の下でプログラミングすることができる。
