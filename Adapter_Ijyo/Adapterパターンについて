Adapterパターン

【一皮被せて再利用】

例えば、直流ボルト12ボルトで動くノートパソコンを交流100ボルトのAC電源に繋ぐとする
そのとき私たちは、ACアダプターという装置を使います。ACアダプターは、家庭用の電げとして提供されている「交流100ボルト」を、今必要な
「直流12ボルト」に交換してくれる
提供されているものと、必要なものとの間に入って、その間を埋めるのがアダプターの仕事
アダプター（Adapter）は「適合させるもの」という意味があり、
ACアダプターは、直流12ボルトのパソコンを交流100ボルトの環境にadaptさせている

プログラムの世界でも、すでに提供されているものがそのまま使えないときに、
必要な形に変換してから利用することがよくある。「すでに提供されているもの」と「必要なもの」の間の「ずれ」を埋めるようなデザインパターン

これが
Adapterパターンになる

AdapterパターンはWrapperパターンと呼ばれることもあり、
包むものという意味の「wrapper」というように、何かをくるりと包んで別の用途に使えるように変換してくれるもの

Adapter_Jyotoのサンプルプログラムは
Adapterを委譲を使用して行ったもの

委譲とは
要するに「誰かにおまかせする」ということ。
重要な会議に出席できないときに、委任状というものを書き、「私は出席できないので代わりに佐藤さんにお願いします。」というようなもの
Javaの委譲は、あるメソッドの実際の処理を他のインスタンスのメソッドに任せてしまうことを言う。


Adapterパターンの登場人物

・Target（対象）の役
今必要となっているメソッドを定めている役。
ノートパソコンを動かすための直流12ボルトのこと。
サンプルプログラムでは、Printインタフェース（継承の場合）、Printクラス（委譲の場合）がこの役を務める

・Client（依頼者）の役
Target役のメソッドを使って仕事する役
直流12ボルトで動くノートパソコンになる
サンプルプログラムでは、Mainクラスがこれに相当する

・Adaptee（適合される側）の役
Adapter（適合する側）ではなくAdaptee（適合される側）。
Adapteeはすでに用意されているメソッドを持っている役で、交流100ボルトのAC電源です
サンプルプログラムでは、Bannerクラスがこの役を務めている
このAdaptee役のメソッドがTarget役のメソッドに一致していたら（つまり家庭に提供されているのが最初から直流12ボルトだったら）、
次のAdapter役はいらなかったのです


・Adapterの役
Adapterパターンの主人公。
Adaptee役のメソッドを使って何とかTarget役を満たそうと言うのがAdapterパターンの目的であり、Adapter役の仕事になる。
交流100ボルトを直流12ボルトに変換するアダプターです
サンプルプログラムでは、PrintBannerクラスがこの役を務めている。
クラスによるAdapterパターンの場合には、Adapter役は「継承」を使ってAdaptee役を利用する
一方インスタンスによるAdapterパターンの場合には、「委譲」を使ってAdaptee役を利用する


どんなん時に使用するのか？？
プログラミングは、いつも新規でプログラムを作成するとは限らない
既存のプログラムを利用することもよくある。
特にそのクラスが十分にテストされ、バグが少なく、また実際にこれまで使われてきた実績があるならばなおさらです
何とかのそのクラスを部品として再利用したいものです
Adapterパターンは、既存のクラスに一皮被せて必要とするクラスを作成する
このパターンによって、必要とするメソッド群を素早く作ることができる。
もしバグが出たとしても、既存のクラス（Adaptee役）にはバグがないことがわかっているので、
Adapter役を重点的に調べれば良いことになり、プログラムのチェックがとても楽になる

すでに作成されたクラスに新しいインタフェース（API）を適合させようとした時
私たちは、既存のクラスを修正しようと考えてしまいがち、「ここをちょいと変えればきっと仕事はおしまいだ」
と思って修正指定しますが、
ちょっと修正しただけでもまたテストをしないといけなくなる。
Adapterパターンを既存のクラスを修正しないで使用できるようにしている


もちろん、Adaptee役とTarget役の機能があまりにもかけ離れている場合には、
Adapterパターンは使用できない。
交流100ボルトの電源を元にして水道の水を出すわけにはいかない。

