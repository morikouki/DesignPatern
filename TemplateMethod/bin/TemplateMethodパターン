TemplateMethodパターン
テンプレートのイメージは
チョコレートを固める型のようなもので、ストロベリー味のチョコを入れれば、ストロベリー味が、
ビターチョコを入れればビターチョコ味ができる。
ただ、チョコの形はそのテンプレートにより決まっているので、どれも同じ形をしている。

TemplateMethodパターンとは
テンプレートの機能を持つパターンで、
スーパークラスの方にテンプレートとなるメソッドが定義されていて、そのメソッドの定義の中では抽象メソッドが使用されている。
このため、スーパークラスのプログラムを読んでいるだけでは、最終的にどんな処理をするのかわからない。
わかるのは抽象メソッドをどのように呼び出しているかだけ
抽象メソッドを実際に実装するのはサブクラスになる。
サブクラスの側でメソッドを実装すれば、具体的な処理が決定する異なるサブクラスを実装すれば、異なる処理が行われる。
しかし、どのサブクラスでどのような実装をしたとしても、処理の大きな流れはスーパークラスで組み立てた通りになる。
このように、スーパークラスで処理の枠組みを定め、サブクラスでその具体的な内容を定めるようなデザインパターンを
TemplateMethodパターンという

サンプルプログラムでは
「文字や文字列を5回繰り返して表示する」というものを実装
呼び出されるサブクラス（CharDisplay、StringDisplay）によって表示される内容は異なるが、
処理の大まかな流れ（open, print, close）は変わらない。
open, print, closeメソッドは抽象メソッドになっている。
この3つのメソッドを使用しているdisplayメソッドがテンプレートメソッドになる

TemplateMethodパターンの登場人物
・AbstractClass（抽象クラス）の役
AbstractClass役は、テンプレートメソッドを実装する。
また、そのテンプレートメソッドを使用している抽象メソッドを宣言している。
この抽象メソッドは、サブクラスのConcreteClass役によって実装される。
サンプルプログラムではAbstractDisplayクラスがこの役を務める

・ConcreteClass（具象クラス）の役
AbstractClass役で定義されている抽象メソッドを具体的に実装する
ここで実装したメソッドは、AbstractClass役のテンプレートメソッドから呼び出される。
サンプルプログラムでは、CharDisplayクラスやStringDisplayクラスがこの役を務める


TemplateMethodを使用するとどんないいことがあるのか？
・ロジックが共通化できる
→スーパークラスのテンプレートメソッドでアルゴリズムが記述されているので、サブクラス側ではアルゴリズムをいちいち記述する必要がない。
例えば、TemplateMethodパターンを使用しないで、エディタのコピー&ペースト機能を使って複数のConcreateClass役を作ってしまったとすると
Concreate1Class, Concreate2Class, Concreate3Class・・・たちは、全て似て非なるクラスになる。
書いた直後はいいが、後でConcreate1Classにバグが発見されると一体どんなるか。
1つのバグを修正を、全てのConcreateClass役に反映させないといけなくなる。
その点、TemplateMethodパターンを使用していればテンプレートメソッドだけ修正すればよくなる


TemplateMethodパターンは、スーパークラスとサブクラスが綿密に連絡をとって動いている。
なので、スーパークラスで宣言されている抽象メソッドを実際にサブクラスで実装するときには、そのメソッドがどういうタイミングで
呼び出されるかを把握しておく必要がある。
スーパークラスのソーププログラムがないと、サブクラスの実装は難しい。


サンプルプログラムでは、
CharDisplayのインスタンスも、StringDisplayのインスタンスも、AbstractDisplay型の変数に代入している
そして、displayメソッドを呼び出している。


補足
自分達がクラス階層について学ぶ時、大抵はサブクラスの視点で考える
つまり次のような視点になりがち
・スーパークラスで定義されているメソッドがサブクラスで利用できる
・サブクラスに少しメソッドを書くだけで新しい機能が追加できる
・サブクラスでメソッドをオーバーライドすれば振る舞いを変更できる

ここでちょっと視点を変えて、スーパークラスの気持ちになってみると以下のようになる
・サブクラスがそのメソッドを実装することを期待する
・サブクラスに対して、そのメソッドの実装を要請する
サブクラスには、スーパークラスで宣言されている抽象メソッドを実装するという責任が生じているといえる


抽象クラスの意義
抽象クラスはインスタンをを作成できない
「インスタンスを作成できないクラスなど何の役に立つのか」と思うかもしれないが、
抽象メソッドにはメソッドの本体が書かれていないので、具体的な処理内容はわからない。
しかし、メソッドの名前を決め、そのメソッドを使ったテンプレートメソッドによって処理を記述することができる
実際の処理内容はサブクラスでまでいかなければわからないが、抽象クラスの段階で処理の流れを形作るのは大切なこと

スーパークラスとサブクラスの強調
スーパークラスの記述を多くすれば、サブクラスの記述は楽になるがサブクラスの自由度は減ってしまう。
スーパークラスの記述を少なくすれば、サブクラスの記述は大変になり、個々のサブクラスで処理の記述が重複してくるかもしれない。
TemplateMethodパターンでは、処理の骨組みをスーパークラスで記述し、具体的な肉付けをサブクラスで行っている。