Compositeパターン

【容器と中身の同一視】

コンピュータのファイルシステムには、「ディレクトリ」というものがある。
ディレクトリに中にはファイルが入っていたり、別のディレクトリが入っていたりする。
そしてまた、そのサブディレクトリの中に他のファイルやサブディレクトリが入っていることもある。
ディレクトリはそのような「入れ子」になった構造、再帰的な構造を作り出している。
さて、ディレクトリとファイルが異なるものだが、このどちらも「ディレクトリの中に入れることができるもの」。
ディレクトリとファイルをまとめて「ディレクトリエントリ」と呼ぶこともある。
ディレクトリエントリという名前によって、ディレクトリとファイルを同じ種類のものと見なしている（同一視）。
例えば、あるディレクトリの中に何があるかを順に調べていくとする。
そこで順に見ていくものは、サブディレクトリかもしれないし、ファイルかもしれない。
一言で言えば、「ディレクトリエントリ」というものを見ていくことになる。
ディレクトリとファイルをまとめてディレクトリエントリと扱うように、容器と中身を同じ種類のものとして扱うと便利な場合がある。
容器の中には、中身を入れてもいいし、さらに小さな容器を入れることもできる。
そして、その小さな容器の中にもっと小さな容器を入れて・・・・ってこんな風にして、
入れ子になった構造、再帰的な構造を作ることができる。
Compositeパターン
は、このような構造を作るためのもので、
容器と中身を同一視し、再帰的な構造を作る
デザインパターンなのだ、compositeは英語で「混合物」「複合物」という意味。


サンプルプログラムでは
ファイルとディレクトリを模試的に表現したプログラムを作っている。
ファイルを表すクラウがFileクラス、ディレクトリを表すクラスがDirectoryクラスで、
その両方を取りまとめる形で、スーパークラスのEntryクラスがある。
Entryクラスは、ディレクトリエントリを表すクラスで、FileとDirectoryを同一視するクラス

Compositeパターンの登場人物
・Leaf（葉）の役
「中身」を表す役。
この役の中には、他のものを入れることはできない。
サンプルプログラムでは、Fileクラスがこの役を務める。

・Composite（複合体）の役
「容器」を表す役
Leaf役やComposite役を入れることができる。
サンプルプログラムでは、Directoryクラスがこの役を務める。

・Componentの役
Leaf役とComposite役を同一視するための役
Component役は、Leaf役とComposite役に共通のスーパークラスとして実現する。
サンプルプログラムでは、Entryクラスがこの役を務める。

・Client（依頼者）の役
Compositeパターンの利用者
サンプルプログラムでは、Mainクラスがこの役を務める。

複数と単数の同一視
Compositeパターンは容器と中身の同一視を行うパターンになる、
これを複数と単数の同一視と呼ぶこともできる。
すなわち、複数個のものを集めて、それをあたかも1つのものであるかのように取り扱う。
例えば、プログラムの動作テストを考えてみる。
Test1ではキーボードからの入力テストを行い、Test2ではファイルからの入力テストを行い、Test3ではネットワークからの入力テストを
行なったとする。さてここで、Test1, Test2, Test3の3つをまとめて「入力テスト」としたいとする。
このような時にはCompositeパターンを使うことができる。
複数のテストを集めて「入力テスト」とし、また別のテストを集めて「出力テスト」とし、さらにその両者をまとめて「入出力テスト」とするのだ。
