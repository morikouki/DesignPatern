Iteratorパターン
サンプルプログラムでは、
本棚(BookShelf)の中に本(Book)を入れ、その本の名前を順番に表示するというものを実装

Javaで配列の要素を全て表示するには、for文を使って次のように書きます
for (int i = 0; i < arr.length; i++) {
	System.out.println(arr[i]);
}

ここで使われているループ変数「i」に注目する
変数iは、最初の0で初期化され1,2,3・・と増えていく

ここで使用されている「i」の動きを抽象化し、一般化したものをデザインパターン
Iteratorパターン
と呼ぶ

Iteratorパターンは
何かがたくさん集まっているときに、それを順番に指し示していき、全体をスキャンしていく処理を行うためのもの
iterator：何かを「繰り返す」という意味
日本語では「反復子」と呼ばれることもある

Iteratorパターンの登場人物
・Iterator（反復子）の役
要素を順番にスキャンしていくインタフェースを定める役
サンプルプログラムでは Iteratorインタフェースがこの役を務めている
次の要素が存在するかと次の要素を得るメソッドを定めている


・ConcreateIterator（具体的な反復子）の役
Iterator役が定めたインタフェースを実際に実装する役
サンプルプログラムでは BookShelfIteratorクラスがこの役を務めている
この役はスキャンするために必要な情報を持っている必要があり、サンプルプログラムではBookShelfクラスのインスタンスを
bookShelfフィールドで覚えており、注目している本をindexフィールドで覚えていた

・Aggregate（集合体）の役
Iterator役を作り出すインタフェースを定める役
そのインタフェースは、「私が持っている要素を順番にスキャンしてくれる人」を作り出すメソッドということになる
サンプルプログラムでは Aggregateインタフェースがこの役を務めている
iteratorメソッドを定めている

・ConcreateAggregate（具体的な集合体）の役
Aggregate役が定めたインタフェースを実際に実装する役
具体的なIterator役、すなわちConcreteIterator役のインスタンスを作り出す
サンプルプログラムでは BookShelfクラスがこの役を務めている


どうして Iteratorパターンを使用するのか？？
要素の繰り返しなら、forやwhile文でいいやん。。。と思います
なぜ集合体の外にIterator役などというものを作る必要があるのか、、
大きな理由は、　Iteratorを使うことで、実装とは切り離して数え上げを行うことができるから!!

while (it.hasNext()) {
	Book book = (Book)it.next();
	System.out.println(book.getName());
}

ここで使われているのは、hasNextとnextというIteratorのメソッドだけになる
BookShelfの実装で使われているメソッドは呼び出されていない。
つまり、whileループはBookShelfの実装に依存しないことを示している。

BookShelfの実装方法を変更したとしても、
BookShelfがiteratorメソッドを持っており、正しいIteratorを返してくれれば
上記のループを変更しなくても動作する！！


デザインパターンはクラスの再利用化を促進するものになる。
クラスの再利用化とは、クラスを部品としてつけるようにするということであり、1つの部品を修正しても
他の部品の修正が少なくて済む。ということになる
