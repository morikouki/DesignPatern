Observerパターン

【状態の変化を通知する】

observerとは、観察する人、すなわち「観察者」という意味
Observerパターンでは、観察対象の状態が変化すると、観察者に対して通知される。
Observerパターンは、状態変化に応じた処理を記述するときに有効

サンプルプログラムでは
数をたくさん生成するオブジェクトを観察者が観察して、
そsの値を表示するというもの。ただし、表示の方法は観察者によって異なる。
DigitObserverは値を数字で表示するが、GraphObserverは値を簡易グラフで表示する。

Observerパターンの登場人物
・Subject（被験者）の役
Subject役は、「観察される側」を表す。
Subject役は、観察者であるObserver役を登録するメソッドと、削除するメソッドを持っている。
また、「現在の状態を取得する」メソッドも宣言されている。
サンプルプログラムでは、NumberGeneratorクラスがこの役を務める。

・ConcreateSubject（具体的な被験者）の役
ConcreateSubject役は、具体的な「観察される側」を表現する役
状態が変化したら、そのことを登録されているObserver役に伝える。
サンプルプログラムでは、RandomNumberGeneratorクラスがこの役を務める。

・Observer（観察者）の役
Observer役は、Subject役から「状態が変化しましたよ」と教えてもらう役
そのためのメソッドがupdateだ。
サンプルプログラムでは、Observerインタフェースがこの役を務める。

・ConcreateObserver（具体的な観察者）の役
ConcreateObserver役は、具体的なObserver
updateメソッドが呼び出されると、そのメソッドの中でSubject役の現在の状態を取得する。
サンプルプログラムでは、DigitObserverクラスや、GrapgObserverクラスがこの役を務める。

デザインパターンの目的の1つは、クラスを再利用可能な部品にすること。
Observerパターンでは、状態を持っているConcreateSubject役と、状態変化を通知してもらうConcreateObserver役が登場したが、
その2つの役目をつないでいるものが、インタフェースとしてのSubject役とObserver役。
・抽象クラスやインタフェースを使って、具象クラスから抽象メソッド引き剥がす
・引数でインスタンスを渡すときや、フィールドでインスタンスを保持するときには、具象クラスの方にしないで、抽象クラスやインタフェースの型にしておく
このようにすれば、具象クラスの部分をカチッと交換することができる。

Observerの順序
Subject役には、複数人のObserver役が登録されている。
サンプルプログラムのnotifyObserversメソッドでは、先に登録したObserverのupdateメソッドが先に呼び出されることになる。
一般に、ConcreateObserver役のクラスを設計するときには、updateメソッドが呼び出される順序が変わっても問題が起きないようにする必要がある。
DigitObserverのupdateを呼んだ後でなければ、GraphObserverのupdateが正しく動作しない、などということがあってはいけない。
もっとも、各クラスの独立性がきちんと保たれていればあまり依存性の混乱は起きない。




