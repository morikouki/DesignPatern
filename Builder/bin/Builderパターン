Builderパターン
構造を持っているものを構築したりすることを英語でbuild（ビルド）という。
ビルを建てる時は、まず地盤を固め、骨組みを作り、下から上に少しずつ作っていく
一般的に、複雑な構造を持ったものを作り上げる時、一気に完成させるのは困難で、
まず全体を構成している各部分を作り、段階を踏んで組み上げていくことになる。
構造を持ったインスタンスを組み上げていくのが
Builderパターンになる。

サンプルプログラムでは、
「文書」を作成するプログラムを作っている。ここで作る文書は以下のような構造をしている。
・タイトルを1つ含む
・文字列をいくつか含む
・箇条書きの項目をいくつか含む

Builderクラスでは文書を構築するためのメソッドを定める。
そして、Directorクラスがそのメソッドを使って、具体的な1つの文書を作る。
Builderクラスは抽象クラスで実際の処理は書かれていない。
抽象メソッドが宣言されているだけ、文書作成のための具体的な処理を決定するのは、Builderクラスのサブクラス。
・TextBuilderクラス・・・プレーンテキスト（普通の文字列）を使って文書を作成する
・HTMLBuilderクラス・・・HTMLを使って文書を作る

Bilderパターンの登場人物
・Builder（建築者）の役
Builder役は、インスタンスを作成するためのインタフェースを定める。
Builder役には、インスタンスの各部分を作るためのメソッドが用意される。
サンプルプログラムでは、Builderクラスがこの役を務める。

・ConcreateBuilder（具体的建築者）の役
ConcreateBuilder役は、Builder役のインタフェースを実装しているクラス。
実際のインスタンス作成で呼び出されるメソッドが、ここで定義される。
また、最終的にできた結果を得るためのメソッドが用意されている。
サンプルプログラムでは、TextBuilderクラスやHTMLBuilderクラスがこの役を務める。

・Director（監督者）の役
Director役、Builder役のインタフェースを使ってインスタンスを生成する。
ConcreateBuilder役に依存したプログラミングでは行いわない。
ConcreateBuilder役がなんであってもうまく機能するように、Builder役のメソッドのみを使用する。
サンプルプログラムでは、Directorクラスがこの役を務める。

・Client（依頼人）の役
Builderパターンを利用する役
サンプルプログラムでは、Mainクラスに該当する

誰が何を知っているか
オブジェクト指向プログラミングでは、「誰が何を知っているか」はとても大事。
すなわち、どのクラスがどのメソッドを使えるか（使って良いか）に注意してプログラミングする必要がある。
サンプルプログラムでは、MainクラスはBuilderクラスのメソッドを知らない（呼び出さない）。
Mainクラスは、Directorクラスのconstructメソッドだけを呼び出す。
すると、Directorクラスの中でむにゃむにゃ仕事が進み（Mainクラスはそれを気にかけず）、文書が完成する。

一方、Directorクラスが知っているのはBuilderクラスになる。
DirectorクラスはBuilderクラスのメソッドを使って文書を構築する。
しかし、Directorクラスは、自分が実際に利用しているクラスが本当はなんなのか知らない。
TextBuilderなのかHTMLBuilderなのかあるいは他のBuilderクラスなのか知らない。
知らなくてもいい。
DirectorクラスはBuilderクラスのメソッドだけを使っており、Builderクラスのサブクラスはそのメソッドを実装しているから。
Directorクラスが自分の利用しているBuilderクラスのサブクラスを知らないのはとてもいいことで、
「知らないからこと入れ替えができる」ということになる。
TextBuilderのインスタンスをDirectorに与えても、HTMLBuilderのインスタンスをDirectorに与えても、
正しく機能するのは、DirectorクラスがBuilderクラスの具体的なサブクラスを「知らない」から。
知らないからこそ、入れ替えができる。
入れ替えができるからこそ、部品としての価値が高い。
この「交換可能性」について、クラスの設計者は常に意識しておく必要がある。

設計時に決められること、決められないこと
Builderクラスは、文書を構築するのに（目的を達成するのに）必要かつ十分なメソッド群を宣言している必要がある。
Directorクラスに与えられる道具は、Builderクラスが提供するものなので、Builderクラスのメソッドとして何を用意するかは大事
しかも、Builderクラスは、将来増えるかもしれないBuilderクラスのサブクラスたちの要求にも応える必要がある。
サンプルプログラムでは、プレーンテキストとHTMLファイルだけを作成しているが、将来他の形式の文書を作りたいとなった時
果たしてその形式用のBuilderクラスを作成することができるか、新たなメソッドが必要になったりしないかを考え設計することが大事
